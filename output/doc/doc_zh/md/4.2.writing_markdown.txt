4.2 markdown 设计组件
----------------------

&nbsp;

使用 Shadow Slide 的有两类人：样板设计者，样板使用者，本节供样板设计者阅读，会涉及一点编程知识。

#### 一个样板：IndexTable

我们通过一个例子（IndexTable）介绍如何利用 markdown 构造出易用、易理解的样板，相关基础知识在 Shadow Widget 手册已介绍，包括：双源驱动、可计算表达式、`duals.nodes` 属性、`duals.trigger` 属性、如何编写样板文件等。

从 slide 资源页拖入 IndexTable 样板，创建的组件如下图所示：

![index table](md/res/index_table.png)

这是由列表控制的页切换组件，点选左侧列出的项目，在右侧相应页面即被召唤显示。这个组件按如下方式构成：

```
    NavPanel
    +-- MarkedDiv            // key='mark'
    +-- NavPanel
    |   +-- Panel
    |   |   +-- P
    |   |   |   +-- Span     // item A
    |   |   |   +-- Span     // item B
    |   |   |   +-- Span     // item C
    |   +-- SplitDiv
    |   +-- GroundPanel
    |   |   +-- Page A
    |   +-- GroundPanel
    |   |   +-- Page B
    |   +-- GroundPanel
    |   |   +-- Page C
```

顶层是导航面板 NavPanel，其下先放一个 key 为 `'mark'` 的 MarkedDiv 构件，剩下构件如何构成不重要，至少，对只是简单用一下它的用户来说不重要。在这个导航面板中的构件，都能用 `"./mark"` 相对路径定位 MarkedDiv 构件，该 MarkedDiv 用来定义若干节点（比方这里缺省定义了 Page A、Page B、Page C 三个页面），用一段 markdown 文本描述出来，定义的节点自动记录在 `duals.nodes` 属性里。

然后，剩下构件依据 `duals.nodes` 展示界面内容，实现方式大致是：左侧列表在 P 构件借助 `$for="item in duals('./mark').nodes"` 生成索引项 `item A, item B, item C`，右侧动态页也由表达式 `$for="item in duals('./mark').nodes"` 动态生成。索引项是 OptSpan，动态页在 GroundPanel 下生成，OptSpan 与 GroundPanel 构成可选导航结构，选中不同 OptSpan 会驱动不同 GroundPanel 动态显示。说明一下，如果您没理解本处原理，没关系的，**只须知道 MarkedDiv 用来定义内容界面**（记录在 `duals.nodes`），然后剩下构件都是用来展示这个内容界面的。

想编辑 markdown 文本，先选中 MarkedDiv 构件，再点击 edit markdown 浮动按钮 ![edit](md/res/edit_txt.png)，如下图。

![index table](md/res/index_table2.png)

说明：
1. 本样例的处理方式比较典型，今后大家会经常碰到类似东西，不管内容界面显示什么，都用一个 MarkedDiv（或 MarkedTable）以 markdown 文本描述它。
2. 该 MarkedDiv 只在设计状态可见，正式运行时不可见，所以不必担它给要展示的内容带来污染。

#### 用 markdown 设计样板的一般要求

1) 保证样例中缺省 markdown 文本与展示的界面之间，容易建立推导关系

两者之间如何对应，要求看一眼就能明白。比如上面样例的缺省 markdown 文本是：

``` md
<pre $=MarkedDiv title='item A'>
Page A
</pre>

<pre $=MarkedDiv title='item B'>
Page B
</pre>

<pre $=MarkedDiv title='item C'>
Page C
</pre>
```

用户看一眼就能明白，这 3 段用来定义 `Page A, Page B, Page C` 三个页面的，左侧导航列表中的 `item A, item B, item C` 是从上面 `title` 属性提取的。够直接，所以提供这类样板，不必配套提供使用手册。

2) 内容自解释

在 markdown 中使用的文本，应让用户看一眼就能理解它是干什么用的，比如 MarkedTable 样板中，缺省文本有 `"Row1ColA", "Row1ColB"`，用户很容易理解到它是表达 “第一行 A 列”，“第一行 B 列” 的内容。

3) 选择合适的描述形式

用文本描述界面形式很自由，MarkedDiv 与 MarkedTable 把传入字串按 markdown 规格去解析。如果设计者自定义一个构件，传入的字串完全可以按其它格式解析，比如下面饼图：

![pie](md/res/pie_chart.png)

合适的描述格式或许是：

```
labels=Search,Directly,Email,Viedo
title.text=Some description
legend.display=true
------

1548 335 310 135
```

4) 必要时分两层或多层定义组件，在各层提供不同配置

在胶片页选中组件，然后在右侧 property 资源页修改属性值，切换编辑焦点就立即生效，这种编辑方式很直观，组件的配置项应尽量采用这种方式供用户修改。

如果组件较复杂，仅在顶层分配属性不够用，还可以在下层（或下下层）提供可配置属性，后面 [“使用蒙板与图片”](#4.2.) 会介绍几个例子。

&nbsp;
