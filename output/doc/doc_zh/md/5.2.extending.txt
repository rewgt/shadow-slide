5.2 如何定制扩展
----------------

&nbsp;

使用 Shadow Slide 的有两类人：样板设计者，样板使用者，本节供样板设计者阅读。

#### 侦听 `slideenter` 事件

胶片文档打开浏览时，每次刚进入一页时系统会触发 `slideenter` 事件，捕获该事件可服务于编程。

由 `slideenter` 事件传递的 `event` 对象额外带两项属性：`pageKey` 与 `pageIndex`，其中 `pageKey` 指示刚进入的胶片页的 key 值，`pageIndex` 则指示该页在 `utils.pageCtrl.keys` 中的位置，值为 `0` 表示首个。

在胶片页的任意级别父节点，都能侦听 `slideenter` 事件，举例如下：

``` js
document.body.addEventListener('slideenter', function(event) {
  console.log('slideenter:', event.pageKey, event.pageIndex);
  console.log('isFirstEnter =', utils.pageCtrl.isFirstEnter(event.target));
},false);
```

#### 定制扩展的形式

定制扩展的目的是设计出若干 “样板” 或 “样例”，分发给他人使用。**最简单的扩展就是制作一个样例文档**，比如 `/shadow-slide/index.html` 就是一份样例文档，可供大家拷贝，在其基础上增、删、改，变成自己的文档，或者，编辑自己的胶片时，打开样例文档，从中拷贝组件，粘贴到当前编辑页。

复杂些扩展，往往要用到 css、js、图片等依赖项文件，还有方便大家从资源页拖入创建组的样板文件，再加上必要的帮助文件。总之，涉及众多文件，归拢一起就是 “工程” 的概念了。所以，我们称这类复杂些的扩展为 **“组件库工程”**。

#### 组件库工程

大家不妨参考 shadow-slide 的目录结构，来建立自己的组件库工程。

以下是建议的目录结构，只是建议，非硬性要求：

1. 在项目的根目录有 `index.html` 文件，及 `lib` 子目录   
`index.html` 是样例文档，`lib` 是打开样例文档的依赖项，主要存放 css、js 等文件。提供这些便于用户将文档整体拷走，然后在样例基础上改成自己的文档。

2. 在项目中提供 `output` 子目录，`output` 下提供 `shared` 子目录   
`shared` 子目录用于提供可嵌入到可视化设计器的资源页，`shared` 目录存放若干样板文件，当然也可以建立多个子目录，分类存放。   
建议在 `shared` 目录下存放一份 `README.md`，用来介绍共享资源如何使用。

3. 可选在 `output/shared/pages/` 提供模板文档   
提供模板文档，便于用户按模板创建一篇新文档，参见 [“新建文档”](#1.4.!new_doc)。模板文档在 `output/shared/pages/` 下提供，如果用户已将 `output/shared` 目录嵌入到可视化设计器的右侧资源区中，找出模板文档会很方便。

开发组件库工程需深入掌握 Shadow Widget，请阅读 Shadow Widget 用户手册，还有本手册附录数节内容，均为组件库开发者提供帮助。

#### 引入第 3 方提供样板资源

接下来介绍如何把别人提供的，类似上述 `shared` 目录下的共享资源，嵌入到我们的可视化设计环境中来。步骤如下：

1. 在可视设计界面点击 Config 按钮 ![config button](md/res/config_btn.png)， 弹出如下窗口：   
![config window](md/res/config_win.png)

2. 在 "Resource pages" 一栏添加样板资源定义，其中 Title 是资源页标签，URL 是样板资源的路径。

通过上述方式添加的资源页将全局生效，不限于当前工程。

&nbsp;
