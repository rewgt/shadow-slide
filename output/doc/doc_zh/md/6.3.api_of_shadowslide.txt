6.3 API 参考
-----------

&nbsp;

> WTC 类
> - [`rewgt.DrawPaper`](#6.3.!draw_paper)
> - [`rewgt.SvgPanel`](#6.3.!svg_panel)
> - [`rewgt.GotoPage`](#6.3.!goto_page)
> - [`rewgt.DelayTimer`](#6.3.!delay_timer)
> - [`rewgt.PlayShell`](#6.3.!play_shell)

> 控制实体
> - [`utils.pageCtrl`](#6.3.!page_ctrl)

&nbsp;

##### <a name="draw_paper"></a>`rewgt.DrawPaper`

> 本类定义绘图纸，继承自 `Panel`（请参考 Shadow Widget API 手册）。

&nbsp;

> **`_statedProp` 新增定义：**
> - `'defId'`   
`defId` 用于 SVG 绘图中标识 `marker-start` 与 `marker-end` 引用名，每个 `DrawPaper` 构件都自动生成一个唯一的 `defId` 标识，用户不必编辑此属性。

> **`getDefaultProps()` 新增属性：**
> - `data-inline: ''`   
取值 `'1'` 或 空字串，值若为真，表示当前 DrawPaper 的子节点，在设计界面的 property 属性页能直接编辑属性，否则只能在专门的 Paper 弹窗编辑器中编辑。

> **新增 duals 属性：**
> - `offsetX: 0`   
绘图区的 X 轴偏移。
> - `offsetY: 0`   
绘图区的 Y 轴偏移。

##### <a name="svg_panel"></a>`rewgt.SvgPanel`

> 本类定义 SVG 绘图单元 ，继承自 `Panel`（请参考 Shadow Widget API 手册）。

> `SvgPanel` 绘图构件自动在它的下层生成一个 key 为 `'txt'` 的 MarkedDiv 节点，用来在该绘图构件上展示文本。

&nbsp;

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：**
> - `rotate: 0`   
将本构件旋转一个角度，取值应为 `0 ~ 360` 之间的数值，构件将以中心点为基准，顺时针旋转指定角度。
> - `svg.cfg`   
定义绘图数据，格式为 `[iStyle, bExtraCfg, imageData, ...]`。其中 `imageData` 表达一个 SVG 图片，`imageData` 可以有 1 个，2 个，或者 3 个。   
`iStyle` 指示绘图类型，值为 `-2` 表示绘制曲线，`-1` 表示绘制直线，`0` 表示绘制单图，`1` 表示从左向右绘制双图或三图，`2` 表示从上向下绘制双图或三图。如果绘制双图，值 `1` 与 `2` 均为尾图固定尺寸、首图拉抻，若绘制三图则中间固定、首尾拉抻。`iStyle` 为 `9` 表示从左向右绘制双图或三图，同值 `1`，但固定与拉抻位置互换，`iStyle` 为 `10` 表示从上向下绘制双图或三图，同值 `2`，但固定与拉抻位置互换。   
`bExtraCfg` 格式为 `[sStrokeLineFormat,0, iPreType,iPostType, x,y, ...]`，其中 `sStrokeLineFormat` 指示线型，`iPreType` 与 `iPostType` 分别定义起止箭头的形态，`x,y` 定义点座标，可以定义多个座标点，在绘制直线或曲线时使用。   
`imageData` 定义 SVG 图片数据，包括 `imageData.width` 与 `imageData.height` 定义绘图 `viewport` 的宽与高，`imageData.svg` 定义 SVG 格式的绘图内容，`imageData.scalable` 表示在 viewport 中是否以百分比定位来绘图，如果是 “百分比” 图片尺寸自适应，否则以整体拉抻来适应。`imageData` 还可以用 URL 字串指向某个 json 文件，其值将从 json 文件自动读取。
> - `strentch: '1'`   
是否拉抻图片来适应当前构件的宽高，值为 `'1'` 表示拉抻，空字串表示不拉抻。
> - `stroke: 3`   
SVG 绘图所用的线条宽度，以像素为单位。
> - `style.strokeColor: '#333'`   
SVG 绘图颜色。
> - `style.fillColor: '#eee'`   
SVG 绘图的填充颜色。

##### <a name="goto_page"></a>`rewgt.GotoPage`

> 本类用来定义跳页器，继承自 `Div`（请参考 Shadow Widget API 手册）。

&nbsp;

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：**
> - `data-goto: '+1'`   
要求用 string 类型数据，`'0'～'N'` 是绝对跳转到指定页，`'0'` 页是首页，`'+N'` 表示后向相对跳转 `N` 页，`'-N'` 表示前向相对跳转 `N` 页，其它形式的字串，表示跳到指定的命名页。

##### <a name="delay_timer"></a>`rewgt.DelayTimer`

> 本类用来定义定时器，继承自 `P`（请参考 Shadow Widget API 手册）。

> 当定时延期结束时，预定义的 `$onClick` 或 `duals.trigger` 将自动触发，如果两项都定义，这两者将同时产生动作。缺省时，这两项均未定义。

&nbsp;

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：**
> - `data-auto: ''`   
取值为 `'1'` 或 空字串，其值为真表示首次演示到当前页时就自动启动延时，否则不自动启动。
> - `data-delay: '0'`   
指定延时多少秒，如 `'3.5'` 表示延时 `3.5` 秒，如果取 `'0'` 值，尝试从单步 step 配置读取，配置为 `fastest, faster, normal, slower, slowest` 分别对应 `1, 2, 3, 4, 5` 秒。

##### <a name="play_shell"></a>`rewgt.PlayShell`

> 本类继承自 `P`（请参考 Shadow Widget API 手册），为可播放构件（如 Audio、Video）提供通用的单步控制外壳。

> PlayShell 提供 `stepPause(), stepIsDone(), playOnEnter()` 操作接口，这些函数被调用时，将自动转接到它下层 key 为 `'player'` 可播放构件的同名函数。

&nbsp;

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：**
> - `data-auto: ''`   
取值为 `'1'` 或 空字串，其值为真表示首次演示到当前页时就自动播放，否则不自动启动。

##### <a name="page_ctrl"></a>`utils.pageCtrl`

> 本实体在原有 `utils.pageCtrl` 基础上，增加了 [`pageCtrl.config` 配置表](#6.2.) 和如下 API 函数，原有 `utils.pageCtrl` 请参考 Shadow Widget API 手册中 `4.2.2` 节内容。

&nbsp;

> **1) `renewPages(bNew)`**

> 用于更新胶片页列表，参数 `bNew` 格式为 `[[sKey,comp], ...]`，数组中各成员的 `sKey` 以 string 格式指明胶片页的 key 值，`comp` 是各胶片页 `component` 节点。

> 注意，本函数不宜频繁调用，一般只在文档刚打开时调用一次，用来额外安装若干胶片页。

> **2) `isFirstEnter(node)`**

> 判断胶片页是否首次进入，参数 `node` 是胶片页的 DOM 节点，若是首次进入返回 `true`，否则返回 `false`。

&nbsp;
