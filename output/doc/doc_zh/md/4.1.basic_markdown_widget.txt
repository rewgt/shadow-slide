4.1 两个基础组件
-------------

&nbsp;

Shadow Slide 广泛使用 markdown 文本的格式撰写胶片内容，一方面因为 markdown 语句够简单，花上 5 分钟就能入门，另一方面，本体系建立在 Shadow Widget 开发系统之上，具有高度灵活性与可扩展性，让 markdown 支持转入标签，任意复杂的界面形式，都能用 markdown 文本轻松表达。

Shadow Widget 内置提供 MarkedDiv 与 MarkedTable 两种最基础的 markdown 构件类定义，本章将介绍如何使用这两种构件，描述各种界面组件。

#### Markdown 语法

网上已有众多 markdown 在线编辑工具，许多工具因为扩展了 markdown 的语法而别具特色，扩展语法各家不一样，很杂、很乱，但几乎所有厂商都支持 <a target="_blank" href="https://daringfireball.net/projects/markdown/syntax">Daring Fireball</a> 确定规则集，这近乎是业界 markdown 规则的最小公共集合。

Shadow Widget 以 Daring Fireball 规则集为基准，而且未在文本字面做扩展，仅借助一条 markdown 固有规则实现扩展，即：允许内置 html 标签。比如下面两种写法都是合法的 markdown 表达方式：

``` md
  [Shadow Slide](https://github.com/rewgt/shadow-slide)

  <a href="https://github.com/rewgt/shadow-slide">Shadow Slide</a>
```

最后一行是使用 html 标签的方法，借助此法，Shadow Widget 用来定义界面的转义标签可以无损的纳入到 markdown 文本中。

如何确定哪些 markdown 语法可用，哪些不能用？只需切换到 Md 资源页，查阅在该页罗列的、附带样例的规则，已是全部。

#### 使用 MarkedDiv

从 slide 资源页拖入 MarkedDiv 样板到当前页，创建一个组件，然后点击 edit markdown 浮动按钮 ![edit](md/res/edit_txt.png)，在弹出窗口可编辑 markdown 文本。完成后，点击弹窗之外的区域，弹窗将自动关闭，当前修改也立即生效。

试着把 MarkedDiv 的 markdown 改成如下文本，看看是什么结果：

``` md
*Level 1*

<pre $=MarkedDiv>*Level 2*</pre>
```

这段文本描述一段带斜体的文字，以及一个由转义标签描述的构件，该转义标签本身，也是 MarkedDiv 构件。

![embeded MarkedDiv](md/res/embed_mared.png)

#### 使用 MarkedTable

MarkedTable 用 markdown 文本描述一个表格，同样从 slide 资源页拖入 MarkedTable 样板来创建组件，按如下方式编辑它的 markdown 文本：

``` md
row1-col1

row1-col2

---

row2-col1

row2-col2
```

本例定义一个 `2 * 2` 的表格，markdown 文本所表示的每个自然段，将自动逐一整理到各个单元格，而表格换行，以文本 `---` 描述的 `<hr>` 为标记，如本例的表格，定义了两行。

如果想让多个自然段纳入同一单元格，不妨借助内嵌 MarkedDiv 构件，表格描述二维数据，MarkedDiv 描述一维数据，二维数据可由一维数据组合而来。例如：

``` md
row1-col1

<pre $=MarkedDiv>
row1-col2

still in row1-col2
</pre>

---

row2-col1

row2-col2
```

#### 要学习转义标签的语法吗？

用 Shadow Slide 只是撰写一份胶片，非得让我学习转义标签吗？答案是：**不必**。

转义标签是 Shadow Widget 编程体系的一项基础技术，用来支持 Web 页的界面设计，凡你能想象到的界面形式，只要在 “html + css + javascript” 能力范围内，都有办法用转义标签描述出来。因为可编程，转义标签技术保证了 Shadow Slide 具有超强表现力。

但具备能力并不意味着您立即拥有它，中间隔了一层 “编程”。我们将围绕 Shadow Slide 工作的人分成两类，一类是样板（或样例）设计者，另一类是文档撰写者。对于前一类人员，他的输出是资源页中的样板，或 [后面要介绍的样例文档](#5.1.)，对于后一类人员，他只需使用设计者已封装好的样板或样例，复制组件、修改组件内容，从而实现文章撰写。

对于普通使用 Shadow Slide 写文章的人，不必学习编程，他只需拷贝现成样板、样例，依猫画虎，把样例中的文本改成自己的内容即可。而且，Shadow Slide 提倡用最基础的 markdown 语法，表达所有内容形式，许多组件看上去很复杂，如果分解为一层或数层数据定义（包括属性配置与 markdown 定义），实际用起来并不复杂。

&nbsp;
